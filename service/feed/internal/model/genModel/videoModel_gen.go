// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"

	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	videoFieldNames          = builder.RawFieldNames(&Video{})
	videoRows                = strings.Join(videoFieldNames, ",")
	videoRowsExpectAutoSet   = strings.Join(stringx.Remove(videoFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	videoRowsWithPlaceHolder = strings.Join(stringx.Remove(videoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	videoModel interface {
		FindVideoList(ctx context.Context, LatestTime string) ([]Video, error)
	}

	defaultVideoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Video struct {
		Id            int64     `db:"id"`
		Author        int64     `db:"author"`
		PlayUrl       string    `db:"play_url"`
		CoverUrl      string    `db:"cover_url"`
		Title         string    `db:"title"`
		FavoriteCount int64     `db:"favorite_count"`
		CommentCount  int64     `db:"comment_count"`
		CreatedAt     time.Time `db:"created_at"`
		UpdatedAt     time.Time `db:"updated_at"`
		DeletedAt     time.Time `db:"deleted_at"`
	}
)

func newVideoModel(conn sqlx.SqlConn) *defaultVideoModel {
	return &defaultVideoModel{
		conn:  conn,
		table: "`video`",
	}
}



func (m *defaultVideoModel) FindVideoList(ctx context.Context, LatestTime string) ([]Video, error) {
	query := "SELECT `id`, `author`, `play_url`, `cover_url`, `title`, `favorite_count`, `comment_count`, `created_at`, `updated_at`, `deleted_at` from video where DATE_FORMAT(created_at,'%Y-%m-%d %H:%i:%s') < ?  ORDER BY created_at limit 30 "
	var resp []Video
	err := m.conn.QueryRows(&resp,query,LatestTime)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideoModel) tableName() string {
	return m.table
}
