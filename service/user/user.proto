syntax = "proto3";

package user;

option go_package = "./user";

message RegisterReq {
  string username = 1; // 注册用户名，最长32个字符
  string password = 2; // 密码，最长32个字符
}

message RegisterResp {
  string status_msg = 1; // 返回状态描述
  int64 user_id = 2; // 用户id
}

message LoginReq {
  string username = 1; // 注册用户名，最长32个字符
  string password = 2; // 密码，最长32个字符
}

message LoginResp {
  string status_msg = 1; // 返回状态描述
  int64 user_id = 2; // 用户id
}

message UserInfoReq {
  int64 user_id = 1; // 用户id
  string token = 2; // 用户鉴权token
}

message UserInfoResp {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述
  User user = 3; // 用户信息
}

message UserInfoListReq {
  repeated int64 user_id = 1; // 用户id
}

message UserInfoListResp {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述
  repeated User user = 3; // 用户信息
}

message User {
  int64 id = 1; // 用户id
  string name = 2; // 用户名称
  int64 follow_count = 3; // 关注总数
  int64 follower_count = 4; // 粉丝总数
  bool is_follow = 5; // true-已关注，false-未关注
  string avatar = 6; //用户头像
  string background_image = 7; //用户个人页顶部大图
  string signature = 8; //个人简介
  int64 total_favorited = 9; //获赞数量
  int64 work_count = 10; //作品数量
  int64 favorite_count = 11; //点赞数量
}

service UserService{
  rpc Register (RegisterReq) returns (RegisterResp);
  rpc Login (LoginReq) returns (LoginResp);
  rpc UserInfo (UserInfoReq) returns (UserInfoResp);
  rpc UserInfoList (UserInfoListReq) returns (UserInfoListResp);
}