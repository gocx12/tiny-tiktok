// Code generated by goctl. DO NOT EDIT.
// Source: relation.proto

package relationservice

import (
	"context"

	"tiny-tiktok/service/relation/relation"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ActionRequest        = relation.ActionRequest
	ActionResponse       = relation.ActionResponse
	FollowListRequest    = relation.FollowListRequest
	FollowListResponse   = relation.FollowListResponse
	FollowerListRequest  = relation.FollowerListRequest
	FollowerListResponse = relation.FollowerListResponse
	FriendListRequest    = relation.FriendListRequest
	FriendUserResponse   = relation.FriendUserResponse
	User                 = relation.User

	Service interface {
		Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
		FollowList(ctx context.Context, in *FollowListRequest, opts ...grpc.CallOption) (*FollowListResponse, error)
		FollowerList(ctx context.Context, in *FollowerListRequest, opts ...grpc.CallOption) (*FollowerListResponse, error)
		FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendUserResponse, error)
	}

	defaultService struct {
		cli zrpc.Client
	}
)

func NewService(cli zrpc.Client) Service {
	return &defaultService{
		cli: cli,
	}
}

func (m *defaultService) Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	client := relation.NewServiceClient(m.cli.Conn())
	return client.Action(ctx, in, opts...)
}

func (m *defaultService) FollowList(ctx context.Context, in *FollowListRequest, opts ...grpc.CallOption) (*FollowListResponse, error) {
	client := relation.NewServiceClient(m.cli.Conn())
	return client.FollowList(ctx, in, opts...)
}

func (m *defaultService) FollowerList(ctx context.Context, in *FollowerListRequest, opts ...grpc.CallOption) (*FollowerListResponse, error) {
	client := relation.NewServiceClient(m.cli.Conn())
	return client.FollowerList(ctx, in, opts...)
}

func (m *defaultService) FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendUserResponse, error) {
	client := relation.NewServiceClient(m.cli.Conn())
	return client.FriendList(ctx, in, opts...)
}
